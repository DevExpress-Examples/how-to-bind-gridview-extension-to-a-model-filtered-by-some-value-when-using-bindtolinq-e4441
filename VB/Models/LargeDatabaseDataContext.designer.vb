'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")> _
Partial Public Class LargeDatabaseDataContextDataContext
    Inherits System.Data.Linq.DataContext

    Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertProduct(instance As Product)
    End Sub
    Partial Private Sub UpdateProduct(instance As Product)
    End Sub
    Partial Private Sub DeleteProduct(instance As Product)
    End Sub
    Partial Private Sub InsertSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
    Partial Private Sub UpdateSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
    Partial Private Sub DeleteSalesOrderDetail(instance As SalesOrderDetail)
    End Sub
#End Region

    Public Sub New()
        MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("AdventureWorksConnectionString").ConnectionString, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
        MyBase.New(connection, mappingSource)
        OnCreated()
    End Sub

    Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
        Get
            Return Me.GetTable(Of Product)()
        End Get
    End Property

    Public ReadOnly Property SalesOrderDetails() As System.Data.Linq.Table(Of SalesOrderDetail)
        Get
            Return Me.GetTable(Of SalesOrderDetail)()
        End Get
    End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Production.Product")> _
Partial Public Class Product
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _ProductID As Integer

    Private _Name As String

    Private _ProductNumber As String

    Private _MakeFlag As Boolean

    Private _FinishedGoodsFlag As Boolean

    Private _Color As String

    Private _SafetyStockLevel As Short

    Private _ReorderPoint As Short

    Private _StandardCost As Decimal

    Private _ListPrice As Decimal

    Private _Size As String

    Private _SizeUnitMeasureCode As String

    Private _WeightUnitMeasureCode As String

    Private _Weight As System.Nullable(Of Decimal)

    Private _DaysToManufacture As Integer

    Private _ProductLine As String

    Private _Class As String

    Private _Style As String

    Private _ProductSubcategoryID As System.Nullable(Of Integer)

    Private _ProductModelID As System.Nullable(Of Integer)

    Private _SellStartDate As Date

    Private _SellEndDate As System.Nullable(Of Date)

    Private _DiscontinuedDate As System.Nullable(Of Date)

    Private _rowguid As System.Guid

    Private _ModifiedDate As Date

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnProductNumberChanging(value As String)
    End Sub
    Partial Private Sub OnProductNumberChanged()
    End Sub
    Partial Private Sub OnMakeFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMakeFlagChanged()
    End Sub
    Partial Private Sub OnFinishedGoodsFlagChanging(value As Boolean)
    End Sub
    Partial Private Sub OnFinishedGoodsFlagChanged()
    End Sub
    Partial Private Sub OnColorChanging(value As String)
    End Sub
    Partial Private Sub OnColorChanged()
    End Sub
    Partial Private Sub OnSafetyStockLevelChanging(value As Short)
    End Sub
    Partial Private Sub OnSafetyStockLevelChanged()
    End Sub
    Partial Private Sub OnReorderPointChanging(value As Short)
    End Sub
    Partial Private Sub OnReorderPointChanged()
    End Sub
    Partial Private Sub OnStandardCostChanging(value As Decimal)
    End Sub
    Partial Private Sub OnStandardCostChanged()
    End Sub
    Partial Private Sub OnListPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnListPriceChanged()
    End Sub
    Partial Private Sub OnSizeChanging(value As String)
    End Sub
    Partial Private Sub OnSizeChanged()
    End Sub
    Partial Private Sub OnSizeUnitMeasureCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSizeUnitMeasureCodeChanged()
    End Sub
    Partial Private Sub OnWeightUnitMeasureCodeChanging(value As String)
    End Sub
    Partial Private Sub OnWeightUnitMeasureCodeChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnDaysToManufactureChanging(value As Integer)
    End Sub
    Partial Private Sub OnDaysToManufactureChanged()
    End Sub
    Partial Private Sub OnProductLineChanging(value As String)
    End Sub
    Partial Private Sub OnProductLineChanged()
    End Sub
    Partial Private Sub OnClassChanging(value As String)
    End Sub
    Partial Private Sub OnClassChanged()
    End Sub
    Partial Private Sub OnStyleChanging(value As String)
    End Sub
    Partial Private Sub OnStyleChanged()
    End Sub
    Partial Private Sub OnProductSubcategoryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductSubcategoryIDChanged()
    End Sub
    Partial Private Sub OnProductModelIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductModelIDChanged()
    End Sub
    Partial Private Sub OnSellStartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSellStartDateChanged()
    End Sub
    Partial Private Sub OnSellEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSellEndDateChanged()
    End Sub
    Partial Private Sub OnDiscontinuedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDiscontinuedDateChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property ProductID() As Integer
        Get
            Return Me._ProductID
        End Get
        Set(value As Integer)
            If ((Me._ProductID = value) _
               = False) Then
                Me.OnProductIDChanging(value)
                Me.SendPropertyChanging()
                Me._ProductID = value
                Me.SendPropertyChanged("ProductID")
                Me.OnProductIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
    Public Property Name() As String
        Get
            Return Me._Name
        End Get
        Set(value As String)
            If (String.Equals(Me._Name, value) = False) Then
                Me.OnNameChanging(value)
                Me.SendPropertyChanging()
                Me._Name = value
                Me.SendPropertyChanged("Name")
                Me.OnNameChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
    Public Property ProductNumber() As String
        Get
            Return Me._ProductNumber
        End Get
        Set(value As String)
            If (String.Equals(Me._ProductNumber, value) = False) Then
                Me.OnProductNumberChanging(value)
                Me.SendPropertyChanging()
                Me._ProductNumber = value
                Me.SendPropertyChanged("ProductNumber")
                Me.OnProductNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MakeFlag", DbType:="Bit NOT NULL")> _
    Public Property MakeFlag() As Boolean
        Get
            Return Me._MakeFlag
        End Get
        Set(value As Boolean)
            If ((Me._MakeFlag = value) _
               = False) Then
                Me.OnMakeFlagChanging(value)
                Me.SendPropertyChanging()
                Me._MakeFlag = value
                Me.SendPropertyChanged("MakeFlag")
                Me.OnMakeFlagChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedGoodsFlag", DbType:="Bit NOT NULL")> _
    Public Property FinishedGoodsFlag() As Boolean
        Get
            Return Me._FinishedGoodsFlag
        End Get
        Set(value As Boolean)
            If ((Me._FinishedGoodsFlag = value) _
               = False) Then
                Me.OnFinishedGoodsFlagChanging(value)
                Me.SendPropertyChanging()
                Me._FinishedGoodsFlag = value
                Me.SendPropertyChanged("FinishedGoodsFlag")
                Me.OnFinishedGoodsFlagChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(15)")> _
    Public Property Color() As String
        Get
            Return Me._Color
        End Get
        Set(value As String)
            If (String.Equals(Me._Color, value) = False) Then
                Me.OnColorChanging(value)
                Me.SendPropertyChanging()
                Me._Color = value
                Me.SendPropertyChanged("Color")
                Me.OnColorChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SafetyStockLevel", DbType:="SmallInt NOT NULL")> _
    Public Property SafetyStockLevel() As Short
        Get
            Return Me._SafetyStockLevel
        End Get
        Set(value As Short)
            If ((Me._SafetyStockLevel = value) _
               = False) Then
                Me.OnSafetyStockLevelChanging(value)
                Me.SendPropertyChanging()
                Me._SafetyStockLevel = value
                Me.SendPropertyChanged("SafetyStockLevel")
                Me.OnSafetyStockLevelChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderPoint", DbType:="SmallInt NOT NULL")> _
    Public Property ReorderPoint() As Short
        Get
            Return Me._ReorderPoint
        End Get
        Set(value As Short)
            If ((Me._ReorderPoint = value) _
               = False) Then
                Me.OnReorderPointChanging(value)
                Me.SendPropertyChanging()
                Me._ReorderPoint = value
                Me.SendPropertyChanged("ReorderPoint")
                Me.OnReorderPointChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardCost", DbType:="Money NOT NULL")> _
    Public Property StandardCost() As Decimal
        Get
            Return Me._StandardCost
        End Get
        Set(value As Decimal)
            If ((Me._StandardCost = value) _
               = False) Then
                Me.OnStandardCostChanging(value)
                Me.SendPropertyChanging()
                Me._StandardCost = value
                Me.SendPropertyChanged("StandardCost")
                Me.OnStandardCostChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Money NOT NULL")> _
    Public Property ListPrice() As Decimal
        Get
            Return Me._ListPrice
        End Get
        Set(value As Decimal)
            If ((Me._ListPrice = value) _
               = False) Then
                Me.OnListPriceChanging(value)
                Me.SendPropertyChanging()
                Me._ListPrice = value
                Me.SendPropertyChanged("ListPrice")
                Me.OnListPriceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="NVarChar(5)")> _
    Public Property Size() As String
        Get
            Return Me._Size
        End Get
        Set(value As String)
            If (String.Equals(Me._Size, value) = False) Then
                Me.OnSizeChanging(value)
                Me.SendPropertyChanging()
                Me._Size = value
                Me.SendPropertyChanged("Size")
                Me.OnSizeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeUnitMeasureCode", DbType:="NChar(3)")> _
    Public Property SizeUnitMeasureCode() As String
        Get
            Return Me._SizeUnitMeasureCode
        End Get
        Set(value As String)
            If (String.Equals(Me._SizeUnitMeasureCode, value) = False) Then
                Me.OnSizeUnitMeasureCodeChanging(value)
                Me.SendPropertyChanging()
                Me._SizeUnitMeasureCode = value
                Me.SendPropertyChanged("SizeUnitMeasureCode")
                Me.OnSizeUnitMeasureCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightUnitMeasureCode", DbType:="NChar(3)")> _
    Public Property WeightUnitMeasureCode() As String
        Get
            Return Me._WeightUnitMeasureCode
        End Get
        Set(value As String)
            If (String.Equals(Me._WeightUnitMeasureCode, value) = False) Then
                Me.OnWeightUnitMeasureCodeChanging(value)
                Me.SendPropertyChanging()
                Me._WeightUnitMeasureCode = value
                Me.SendPropertyChanged("WeightUnitMeasureCode")
                Me.OnWeightUnitMeasureCodeChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(8,2)")> _
    Public Property Weight() As System.Nullable(Of Decimal)
        Get
            Return Me._Weight
        End Get
        Set(value As System.Nullable(Of Decimal))
            If (Me._Weight.Equals(value) = False) Then
                Me.OnWeightChanging(value)
                Me.SendPropertyChanging()
                Me._Weight = value
                Me.SendPropertyChanged("Weight")
                Me.OnWeightChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaysToManufacture", DbType:="Int NOT NULL")> _
    Public Property DaysToManufacture() As Integer
        Get
            Return Me._DaysToManufacture
        End Get
        Set(value As Integer)
            If ((Me._DaysToManufacture = value) _
               = False) Then
                Me.OnDaysToManufactureChanging(value)
                Me.SendPropertyChanging()
                Me._DaysToManufacture = value
                Me.SendPropertyChanged("DaysToManufacture")
                Me.OnDaysToManufactureChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductLine", DbType:="NChar(2)")> _
    Public Property ProductLine() As String
        Get
            Return Me._ProductLine
        End Get
        Set(value As String)
            If (String.Equals(Me._ProductLine, value) = False) Then
                Me.OnProductLineChanging(value)
                Me.SendPropertyChanging()
                Me._ProductLine = value
                Me.SendPropertyChanged("ProductLine")
                Me.OnProductLineChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Class", Storage:="_Class", DbType:="NChar(2)")> _
    Public Property [Class]() As String
        Get
            Return Me._Class
        End Get
        Set(value As String)
            If (String.Equals(Me._Class, value) = False) Then
                Me.OnClassChanging(value)
                Me.SendPropertyChanging()
                Me._Class = value
                Me.SendPropertyChanged("[Class]")
                Me.OnClassChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Style", DbType:="NChar(2)")> _
    Public Property Style() As String
        Get
            Return Me._Style
        End Get
        Set(value As String)
            If (String.Equals(Me._Style, value) = False) Then
                Me.OnStyleChanging(value)
                Me.SendPropertyChanging()
                Me._Style = value
                Me.SendPropertyChanged("Style")
                Me.OnStyleChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubcategoryID", DbType:="Int")> _
    Public Property ProductSubcategoryID() As System.Nullable(Of Integer)
        Get
            Return Me._ProductSubcategoryID
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._ProductSubcategoryID.Equals(value) = False) Then
                Me.OnProductSubcategoryIDChanging(value)
                Me.SendPropertyChanging()
                Me._ProductSubcategoryID = value
                Me.SendPropertyChanged("ProductSubcategoryID")
                Me.OnProductSubcategoryIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", DbType:="Int")> _
    Public Property ProductModelID() As System.Nullable(Of Integer)
        Get
            Return Me._ProductModelID
        End Get
        Set(value As System.Nullable(Of Integer))
            If (Me._ProductModelID.Equals(value) = False) Then
                Me.OnProductModelIDChanging(value)
                Me.SendPropertyChanging()
                Me._ProductModelID = value
                Me.SendPropertyChanged("ProductModelID")
                Me.OnProductModelIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")> _
    Public Property SellStartDate() As Date
        Get
            Return Me._SellStartDate
        End Get
        Set(value As Date)
            If ((Me._SellStartDate = value) _
               = False) Then
                Me.OnSellStartDateChanging(value)
                Me.SendPropertyChanging()
                Me._SellStartDate = value
                Me.SendPropertyChanged("SellStartDate")
                Me.OnSellStartDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellEndDate", DbType:="DateTime")> _
    Public Property SellEndDate() As System.Nullable(Of Date)
        Get
            Return Me._SellEndDate
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._SellEndDate.Equals(value) = False) Then
                Me.OnSellEndDateChanging(value)
                Me.SendPropertyChanging()
                Me._SellEndDate = value
                Me.SendPropertyChanged("SellEndDate")
                Me.OnSellEndDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscontinuedDate", DbType:="DateTime")> _
    Public Property DiscontinuedDate() As System.Nullable(Of Date)
        Get
            Return Me._DiscontinuedDate
        End Get
        Set(value As System.Nullable(Of Date))
            If (Me._DiscontinuedDate.Equals(value) = False) Then
                Me.OnDiscontinuedDateChanging(value)
                Me.SendPropertyChanging()
                Me._DiscontinuedDate = value
                Me.SendPropertyChanged("DiscontinuedDate")
                Me.OnDiscontinuedDateChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property rowguid() As System.Guid
        Get
            Return Me._rowguid
        End Get
        Set(value As System.Guid)
            If ((Me._rowguid = value) _
               = False) Then
                Me.OnrowguidChanging(value)
                Me.SendPropertyChanging()
                Me._rowguid = value
                Me.SendPropertyChanged("rowguid")
                Me.OnrowguidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
    Public Property ModifiedDate() As Date
        Get
            Return Me._ModifiedDate
        End Get
        Set(value As Date)
            If ((Me._ModifiedDate = value) _
               = False) Then
                Me.OnModifiedDateChanging(value)
                Me.SendPropertyChanging()
                Me._ModifiedDate = value
                Me.SendPropertyChanged("ModifiedDate")
                Me.OnModifiedDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Sales.SalesOrderDetail")> _
Partial Public Class SalesOrderDetail
    Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

    Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

    Private _SalesOrderID As Integer

    Private _SalesOrderDetailID As Integer

    Private _CarrierTrackingNumber As String

    Private _OrderQty As Short

    Private _ProductID As Integer

    Private _SpecialOfferID As Integer

    Private _UnitPrice As Decimal

    Private _UnitPriceDiscount As Decimal

    Private _LineTotal As Decimal

    Private _rowguid As System.Guid

    Private _ModifiedDate As Date

#Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSalesOrderIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderIDChanged()
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSalesOrderDetailIDChanged()
    End Sub
    Partial Private Sub OnCarrierTrackingNumberChanging(value As String)
    End Sub
    Partial Private Sub OnCarrierTrackingNumberChanged()
    End Sub
    Partial Private Sub OnOrderQtyChanging(value As Short)
    End Sub
    Partial Private Sub OnOrderQtyChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnSpecialOfferIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSpecialOfferIDChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceDiscountChanged()
    End Sub
    Partial Private Sub OnLineTotalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLineTotalChanged()
    End Sub
    Partial Private Sub OnrowguidChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnrowguidChanged()
    End Sub
    Partial Private Sub OnModifiedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnModifiedDateChanged()
    End Sub
#End Region

    Public Sub New()
        MyBase.New()
        OnCreated()
    End Sub

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)> _
    Public Property SalesOrderID() As Integer
        Get
            Return Me._SalesOrderID
        End Get
        Set(value As Integer)
            If ((Me._SalesOrderID = value) _
               = False) Then
                Me.OnSalesOrderIDChanging(value)
                Me.SendPropertyChanging()
                Me._SalesOrderID = value
                Me.SendPropertyChanged("SalesOrderID")
                Me.OnSalesOrderIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesOrderDetailID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
    Public Property SalesOrderDetailID() As Integer
        Get
            Return Me._SalesOrderDetailID
        End Get
        Set(value As Integer)
            If ((Me._SalesOrderDetailID = value) _
               = False) Then
                Me.OnSalesOrderDetailIDChanging(value)
                Me.SendPropertyChanging()
                Me._SalesOrderDetailID = value
                Me.SendPropertyChanged("SalesOrderDetailID")
                Me.OnSalesOrderDetailIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CarrierTrackingNumber", DbType:="NVarChar(25)")> _
    Public Property CarrierTrackingNumber() As String
        Get
            Return Me._CarrierTrackingNumber
        End Get
        Set(value As String)
            If (String.Equals(Me._CarrierTrackingNumber, value) = False) Then
                Me.OnCarrierTrackingNumberChanging(value)
                Me.SendPropertyChanging()
                Me._CarrierTrackingNumber = value
                Me.SendPropertyChanged("CarrierTrackingNumber")
                Me.OnCarrierTrackingNumberChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderQty", DbType:="SmallInt NOT NULL")> _
    Public Property OrderQty() As Short
        Get
            Return Me._OrderQty
        End Get
        Set(value As Short)
            If ((Me._OrderQty = value) _
               = False) Then
                Me.OnOrderQtyChanging(value)
                Me.SendPropertyChanging()
                Me._OrderQty = value
                Me.SendPropertyChanged("OrderQty")
                Me.OnOrderQtyChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")> _
    Public Property ProductID() As Integer
        Get
            Return Me._ProductID
        End Get
        Set(value As Integer)
            If ((Me._ProductID = value) _
               = False) Then
                Me.OnProductIDChanging(value)
                Me.SendPropertyChanging()
                Me._ProductID = value
                Me.SendPropertyChanged("ProductID")
                Me.OnProductIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SpecialOfferID", DbType:="Int NOT NULL")> _
    Public Property SpecialOfferID() As Integer
        Get
            Return Me._SpecialOfferID
        End Get
        Set(value As Integer)
            If ((Me._SpecialOfferID = value) _
               = False) Then
                Me.OnSpecialOfferIDChanging(value)
                Me.SendPropertyChanging()
                Me._SpecialOfferID = value
                Me.SendPropertyChanged("SpecialOfferID")
                Me.OnSpecialOfferIDChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")> _
    Public Property UnitPrice() As Decimal
        Get
            Return Me._UnitPrice
        End Get
        Set(value As Decimal)
            If ((Me._UnitPrice = value) _
               = False) Then
                Me.OnUnitPriceChanging(value)
                Me.SendPropertyChanging()
                Me._UnitPrice = value
                Me.SendPropertyChanged("UnitPrice")
                Me.OnUnitPriceChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPriceDiscount", DbType:="Money NOT NULL")> _
    Public Property UnitPriceDiscount() As Decimal
        Get
            Return Me._UnitPriceDiscount
        End Get
        Set(value As Decimal)
            If ((Me._UnitPriceDiscount = value) _
               = False) Then
                Me.OnUnitPriceDiscountChanging(value)
                Me.SendPropertyChanging()
                Me._UnitPriceDiscount = value
                Me.SendPropertyChanged("UnitPriceDiscount")
                Me.OnUnitPriceDiscountChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LineTotal", AutoSync:=AutoSync.Always, DbType:="Decimal(38,6) NOT NULL", IsDbGenerated:=True, UpdateCheck:=UpdateCheck.Never)> _
    Public Property LineTotal() As Decimal
        Get
            Return Me._LineTotal
        End Get
        Set(value As Decimal)
            If ((Me._LineTotal = value) _
               = False) Then
                Me.OnLineTotalChanging(value)
                Me.SendPropertyChanging()
                Me._LineTotal = value
                Me.SendPropertyChanged("LineTotal")
                Me.OnLineTotalChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
    Public Property rowguid() As System.Guid
        Get
            Return Me._rowguid
        End Get
        Set(value As System.Guid)
            If ((Me._rowguid = value) _
               = False) Then
                Me.OnrowguidChanging(value)
                Me.SendPropertyChanging()
                Me._rowguid = value
                Me.SendPropertyChanged("rowguid")
                Me.OnrowguidChanged()
            End If
        End Set
    End Property

    <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
    Public Property ModifiedDate() As Date
        Get
            Return Me._ModifiedDate
        End Get
        Set(value As Date)
            If ((Me._ModifiedDate = value) _
               = False) Then
                Me.OnModifiedDateChanging(value)
                Me.SendPropertyChanging()
                Me._ModifiedDate = value
                Me.SendPropertyChanged("ModifiedDate")
                Me.OnModifiedDateChanged()
            End If
        End Set
    End Property

    Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

    Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

    Protected Overridable Sub SendPropertyChanging()
        If ((Me.PropertyChangingEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
        End If
    End Sub

    Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
        If ((Me.PropertyChangedEvent Is Nothing) _
           = False) Then
            RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
        End If
    End Sub
End Class
